<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>webpack搭建vue项目环境</title>
      <link href="/2019/04/17/webpack-da-jian-vue-xiang-mu-huan-jing/"/>
      <url>/2019/04/17/webpack-da-jian-vue-xiang-mu-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack-vue"><a href="#webpack-vue" class="headerlink" title="webpack-vue"></a>webpack-vue</h1><h4 id="0-项目初始化"><a href="#0-项目初始化" class="headerlink" title="0.项目初始化"></a>0.项目初始化</h4><blockquote></blockquote><p>npm init -y</p><blockquote></blockquote><h4 id="1-安装-webpack"><a href="#1-安装-webpack" class="headerlink" title="1.安装 webpack"></a>1.安装 webpack</h4><blockquote></blockquote><p>分为全局安装和项目内安装</p><pre><code>    npm install webpack -g    npm install webpack --save-dev</code></pre><blockquote></blockquote><h4 id="2-配置webpack-config-js文件"><a href="#2-配置webpack-config-js文件" class="headerlink" title="2.配置webpack.config.js文件"></a>2.配置webpack.config.js文件</h4><pre><code>     const path = require(&#39;path&#39;);     module.exports = {         entry: &#39;./Script/main.js&#39;, //项目入口文件         output:{                    //输出编译后文件地址及文件名             path: path.resolve(__dirname, &#39;dist&#39;),             filename: &#39;js/bundle.js&#39;         }     };</code></pre><p>命令行里面执行 webpack 命令即可看到编译后的文件</p><h4 id="3安装webpack-html-plugin"><a href="#3安装webpack-html-plugin" class="headerlink" title="3安装webpack-html-plugin"></a>3安装webpack-html-plugin</h4><p>npm install html-webpack-plugin –save-dev</p><pre><code>    const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);    ...    plugins:[        ...        new HtmlWebpackPlugin({            title:&#39;react 学习&#39;,            inject:&#39;body&#39;,            filename:&#39;index.html&#39;,            template:path.resolve(__dirname, &quot;index.html&quot;)        }),        ...    ]</code></pre><blockquote></blockquote><p>再次执行webpack命令可看到多了一个index.html文件<br>这个文件是根据模板生成的并自动引入打包生成的js文件<br>运行打包后的index.html即可看到效果。</p><blockquote></blockquote><h4 id="4-安装Vue"><a href="#4-安装Vue" class="headerlink" title="4.安装Vue"></a>4.安装Vue</h4><blockquote></blockquote><pre><code>   npm install vue -save</code></pre><p>修改main.js：</p><pre><code>    import Vue from  &#39;vue&#39;;    var MainCtrl = new Vue({        el:&#39;#main&#39;,        data:{            message:&#39;Hello world&#39;        }    })</code></pre><p>修改index.html:</p><pre><code>   &lt;div id=&quot;main&quot;&gt;      &lt;h3&gt;{{message}}&lt;/h3&gt;   &lt;/div&gt;   </code></pre><p>执行webpack打包运行index.html(打包的文件)报错，经查在webpack.config.js里面配置：</p><pre><code>    ...    resolve: { alias: { &#39;vue&#39;: &#39;vue/dist/vue.js&#39; } }  //vue可以换成@</code></pre><p>再次运行即可看到效果</p><blockquote></blockquote><h4 id="5-安装webpack-dev-server热更新"><a href="#5-安装webpack-dev-server热更新" class="headerlink" title="5.安装webpack-dev-server热更新"></a>5.安装webpack-dev-server热更新</h4><blockquote></blockquote><pre><code>    npm install webpack-dev-server -g    npm install webpack-dev-server --save-dev    npm install vue-hot-reload-api --save-dev</code></pre><p> 配置webpack.config.js</p><pre><code>    ...    devServer: {        historyApiFallback: true,    },    ...</code></pre><p>配置package.json里面命令</p><pre><code>    &quot;start&quot;:&quot;webpack-dev-server --hot --inline --progress --open&quot;</code></pre><p>执行 npm start 浏览器自动打开页面，更改文件后即可看到页面实时更新</p><blockquote></blockquote><h4 id="6-安装babel"><a href="#6-安装babel" class="headerlink" title="6.安装babel"></a>6.安装babel</h4><blockquote></blockquote><p>在使用.vue文件之前先要安装babel(将es6语法转化为es5)</p><pre><code>    npm install babel-core babel-loader babel-plugin-transform-runtime --save-dev     npm install babel-preset-stage-0 babel-runtime babel-preset-es2015 --save-dev </code></pre><p>项目根目录新建.babelrc文件、配置：</p><pre><code>    {    &quot;presets&quot;: [&quot;es2015&quot;, &quot;stage-0&quot;],    &quot;plugins&quot;: [&quot;transform-runtime&quot;]    }</code></pre><blockquote></blockquote><h4 id="7-安装vue-loader处理-vue的文件"><a href="#7-安装vue-loader处理-vue的文件" class="headerlink" title="7.安装vue-loader处理.vue的文件"></a>7.安装vue-loader处理.vue的文件</h4><blockquote></blockquote><p>安装loader 处理.css,.vue文件</p><pre><code>npm install css-loader style-loader vue-loader vue-html-loader --save-dev</code></pre><p>配置webpack.config.js</p><pre><code>   ...   module:{       rules: [           {test: /\.js$/,loader: &#39;babel-loader&#39;,exclude: /node_modules/},           {test: /\.vue$/,loader: &#39;vue-loader&#39;}]        },    //vue: {loaders: {js: &#39;babel&#39;}}   ...</code></pre><p>配置完运行报错：Cannot find module ‘vue-template-compiler’<br>安装vue-template-compiler   //跑不起来可能是balel版本不对  <a href="https://blog.csdn.net/zr15829039341/article/details/86553652" target="_blank" rel="noopener">https://blog.csdn.net/zr15829039341/article/details/86553652</a></p><pre><code>npm install vue-template-compiler --save-dev</code></pre><blockquote></blockquote><p> 修改index.html:</p><pre><code>   &lt;body&gt;    &lt;div id=&quot;main&quot;&gt;       &lt;app&gt;&lt;/app&gt;       &lt;/div&gt;   &lt;/body&gt;</code></pre><blockquote></blockquote><p>新建src/index.vue:</p><pre><code>  &lt;template&gt;    &lt;div class=&quot;message&quot;&gt;{{ msg }}&lt;/div&gt;  &lt;/template&gt;    &lt;script&gt;        export default {        data () {            return {            msg: &#39;Hello from vue-loader!&#39;            }        }        }    &lt;/script&gt;    &lt;style&gt;        .message {        color: blue;        }    &lt;/style&gt;</code></pre><blockquote></blockquote><p>修改main.js</p><pre><code>    ...    import App from &#39;./src/index.vue&#39;;    new Vue({        el: &#39;#main&#39;,        components: { App }    })</code></pre><h4 id="8-使用less"><a href="#8-使用less" class="headerlink" title="8.使用less"></a>8.使用less</h4><blockquote></blockquote><p>安装:</p><pre><code>    npm install less less-loader --save-dev</code></pre><p>使用：</p><pre><code>&lt;style lang=&#39;less&#39;&gt;   .articleWrap{     .articleTop{       color:red;     }   }&lt;/style&gt;</code></pre><blockquote></blockquote><h4 id="9区分生产环境与开发环境"><a href="#9区分生产环境与开发环境" class="headerlink" title="9区分生产环境与开发环境"></a>9区分生产环境与开发环境</h4><blockquote></blockquote><p>使用cross-env：设置开发环境<br>安装：npm install cross-env –save-dev<br>配置命令：</p><pre><code>    &quot;start&quot;: &quot;cross-env NODE_ENV=development webpack-dev-server --hot --inline --progress --open&quot;,    &quot;build&quot;:&quot;cross-env NODE_ENV=production webpack&quot;</code></pre><p>修改webpack配置：</p><pre><code>   if (process.env.NODE_ENV === &#39;production&#39;) {    config.plugins = (config.plugins || []).concat([        new webpack.DefinePlugin({            &#39;process.env&#39;: {                &#39;NODE_ENV&#39;: JSON.stringify(&#39;production&#39;),            },            IS_PRODUCTION: true        }),        /*new webpack.optimize.UglifyJsPlugin({            compress: {warnings: false},            sourceMap: false        }),*/    ]);}else {    config.plugins = (config.plugins || []).concat([        new webpack.DefinePlugin({            &#39;process.env&#39;:            {                &#39;NODE_ENV&#39;: JSON.stringify(&#39;development&#39;),            },            IS_PRODUCTION: false        }),    ]);}</code></pre><p>在程序里面通过：process.env.NODE_ENV 获取当前环境变量</p><blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/04/17/hello-world/"/>
      <url>/2019/04/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
